<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Networking.XMPP.Contracts</name>
    </assembly>
    <members>
        <member name="T:Waher.Networking.XMPP.Contracts.ClientSignature">
            <summary>
            Represents a digital signature on a contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.LegalId">
            <summary>
            ID of legal identity signing the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.BareJid">
            <summary>
            Bare JID of the client used to generate the signature.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.Role">
            <summary>
            Role of the legal identity in the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.Transferable">
            <summary>
            If the signature is transferable to contracts based on the current contract as a template,
            and if no parameters and attributes change in the contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ClientSignature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Contract">
            <summary>
            Contains the definition of a contract
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.#ctor">
            <summary>
            Contains the definition of a contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContractId">
            <summary>
            Contract identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Provider">
            <summary>
            JID of the Trust Provider hosting the contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.TemplateId">
            <summary>
            Contract identity of template, if one was used to create the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.State">
            <summary>
            Contract state
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Created">
            <summary>
            When the contract was created
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Updated">
            <summary>
            When the contract was last updated
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.From">
            <summary>
            From when the contract is valid (if signed)
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.To">
            <summary>
            Until when the contract is valid (if signed)
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.SignAfter">
            <summary>
            Signatures will only be accepted after this point in time.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.SignBefore">
            <summary>
            Signatures will only be accepted until this point in time.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Visibility">
            <summary>
            Contrat Visibility
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Duration">
            <summary>
            Duration of the contract. Is counted from the time it is signed by the required parties.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ArchiveRequired">
            <summary>
            Requied time to archive a signed smart contract, after it becomes obsolete.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ArchiveOptional">
            <summary>
            Optional time to archive a signed smart contract, after it becomes obsolete, and after its required archivation period.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContentSchemaHash">
            <summary>
            The hash digest of the schema used to validate the machine-readable contents (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>) of the smart contract,
            if such a schema was used.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContentSchemaHashFunction">
            <summary>
            Hash function of the schema used to validate the machine-readable contents (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>) of the smart contract,
            if such a schema was used.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Roles">
            <summary>
            Roles defined in the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.PartsMode">
            <summary>
            How parts are defined in the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Parts">
            <summary>
            Defined parts for the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Parameters">
            <summary>
            Defined parameters for the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines">
            <summary>
            Machine-readable contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachinesNamespace">
            <summary>
            Namespace used by the root node of the machine-readable contents of the contract (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachinesLocalName">
            <summary>
            Local name used by the root node of the machine-readable contents of the contract (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForHumans">
            <summary>
            Human-readable contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ClientSignatures">
            <summary>
            Client signatures of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ServerSignature">
            <summary>
            Server signature attesting to the validity of the contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.CanActAsTemplate">
            <summary>
            If the contract can act as a template for other contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.Parse(System.Xml.XmlElement,System.Boolean@)">
            <summary>
            Parses a contract from is XML representation.
            </summary>
            <param name="Xml">XML representation</param>
            <param name="HasStatus">If a status element was found.</param>
            <returns>Parsed contract, or null if it contains errors.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.NormalizeXml(System.Xml.XmlElement,System.Text.StringBuilder,System.String)">
            <summary>
            Normalizes an XML element.
            </summary>
            <param name="Xml">XML element to normalize</param>
            <param name="Output">Normalized XML will be output here</param>
            <param name="CurrentNamespace">Namespace at the encapsulating entity.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.IsLegallyBinding(System.Boolean)">
            <summary>
            Checks if a contract is legally binding.
            </summary>
            <param name="CheckCurrentTime">If the current time should be checked as well.</param>
            <returns>If the contract is legally binding.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.Serialize(System.Text.StringBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serializes the Contract, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="IncludeNamespace">If namespace attribute should be included.</param>
            <param name="IncludeIdAttribute">If id attribute should be included.</param>
            <param name="IncludeClientSignatures">If client signatures should be included.</param>
            <param name="IncludeStatus">If the status element should be included.</param>
            <param name="IncludeServerSignature">If the server signature should be included.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.GetTags">
            <summary>
            Gets event tags describing the contract.
            </summary>
            <returns>Tags</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Item(System.String)">
            <summary>
            Access to contract paameters.
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractsClient">
            <summary>
            Adds support for legal identities, smart contracts and signatures to an XMPP client.
            
            The interface is defined in the IEEE XMPP IoT extensions:
            https://gitlab.com/IEEE-SA/XMPPI/IoT
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractsClient.NamespaceLegalIdentities">
            <summary>
            urn:ieee:iot:leg:id:1.0
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractsClient.NamespaceSmartContracts">
            <summary>
            urn:ieee:iot:leg:sc:1.0
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.#ctor(Waher.Networking.XMPP.XmppClient,System.String)">
            <summary>
            Adds support for legal identities, smart contracts and signatures to an XMPP client.
            
            The interface is defined in the IEEE XMPP IoT extensions:
            https://gitlab.com/IEEE-SA/XMPPI/IoT
            </summary>
            <param name="Client">XMPP Client to use.</param>
            <param name="ComponentAddress">Address to the contracts component.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Dispose">
            <summary>
            Disposes of the extension.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsClient.Extensions">
            <summary>
            Implemented extensions.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKey(Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKey(System.String,Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Address">Address of entity whose public key is requested.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKeyAsync">
            <summary>
            Gets the server public key.
            </summary>
            <returns>Server public key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKeyAsync(System.String)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Address">Address of entity whose public key is requested.</param>
            <returns>Server public key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKey(Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Get the local key that matches the server key.
            </summary>
            <param name="Callback">Method called when response is available.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKey(System.String,Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Get the local key that matches a given server key.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method called when response is available.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKeyAsync">
            <summary>
            Get the local key that matches the server key.
            </summary>
            <returns>Local key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKeyAsync(System.String)">
            <summary>
            Get the local key that matches a given server key.
            </summary>
            <param name="Address">Address of server (component).</param>
            <returns>Local key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Apply(Waher.Networking.XMPP.Contracts.Property[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Properties">Properties of the legal identity.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Apply(System.String,Waher.Networking.XMPP.Contracts.Property[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Properties">Properties of the legal identity.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ApplyAsync(Waher.Networking.XMPP.Contracts.Property[])">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Properties">Properties of the legal identity.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ApplyAsync(System.String,Waher.Networking.XMPP.Contracts.Property[])">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Properties">Properties of the legal identity.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.LegalIdentity,Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler,System.Object)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.LegalIdentity,System.Boolean,Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler,System.Object)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.LegalIdentity,System.Boolean)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.IdentityUpdated">
            <summary>
            Event raised whenever the legal identity has been updated by the server.
            The identity is validated before the event is raised. Invalid identities are discarded.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentities(Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentities(System.String,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identities are registered.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentitiesAsync">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <returns>Set of legal identities registered on the account.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentitiesAsync(System.String)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identities are registered.</param>
            <returns>Set of legal identities registered on the account.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Gets information about a legal identity given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Gets information about a legal identity given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentityAsync(System.String)">
            <summary>
            Gets legal identity registered with the account.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentityAsync(System.String,System.String)">
            <summary>
            Gets legal identity registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentityAsync(System.String)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentityAsync(System.String,System.String)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromizedLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Reports as Compromized one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to compromize.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromizedLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Reports as Compromized one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to compromize.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromizedLegalIdentityAsync(System.String)">
            <summary>
            Reports as Compromized one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to compromize.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromizedLegalIdentityAsync(System.String,System.String)">
            <summary>
            Reports as Compromized one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to compromize.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.Byte[],Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign-</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.String,System.Byte[],Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign-</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.Byte[])">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign-</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.String,System.Byte[])">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign-</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(System.String,System.Byte[],System.Byte[],System.Byte[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign-</param>
            <param name="S1">First signature of data</param>
            <param name="S2">Second signature of data, if available.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(System.String,System.String,System.Byte[],System.Byte[],System.Byte[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign-</param>
            <param name="S1">First signature of data</param>
            <param name="S2">Second signature of data, if available.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignatureAsync(System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign-</param>
            <param name="S1">First signature of data</param>
            <param name="S2">Second signature of data, if available.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignatureAsync(System.String,System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign-</param>
            <param name="S1">First signature of data</param>
            <param name="S2">Second signature of data, if available.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,Waher.Content.Duration,Waher.Content.Duration,Waher.Content.Duration,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(System.String,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync">
            <summary>
            Get contracts the account has created.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync(System.String)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContract(Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Signs a contract
            </summary>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContract(System.String,Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Signs a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContractAsync(Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean)">
            <summary>
            Signs a contract
            </summary>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContractAsync(System.String,Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean)">
            <summary>
            Signs a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(System.String,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractsAsync">
            <summary>
            Get contracts the account has signed.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractsAsync(System.String)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractState">
            <summary>
            Recognized contract states
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Proposed">
            <summary>
            The contract has been proposed as a new contract.
            It needs to be revied and approved by the Trust Provider before it can be used as a template or be signed.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Rejected">
            <summary>
            The contract has been deemed incomplete, inconsistent, or otherwise faulty.
            A rejected contract cannot be used as a template or be signed.
            A rejected contract can be updated by the creator, and thus be put in a Proposed state again.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Approved">
            <summary>
            The contract has been reviewed and approved. It is still not signed, but can act as a template for other contracts.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.BeingSigned">
            <summary>
            The contract is being signed. Not all reuired roles have signed however, and the contract is not legally binding.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Signed">
            <summary>
            The contract has been signed by all required parties, and is legally binding.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Obsoleted">
            <summary>
            The contract has been explicitly obsoleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Deleted">
            <summary>
            The contract has been explicitly deleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractVisibility">
            <summary>
            Visibility types for contracts.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.CreatorAndParts">
            <summary>
            Contract is only accessible to the creator, and any parts in the contract.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.DomainAndParts">
            <summary>
            Contract is accessible to the creator of the contract, any parts in the contract, and any account on the Trust Provider server domain.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.Public">
            <summary>
            Contract is accessible by everyone requesting it. It is not searchable.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.PublicSearchable">
            <summary>
            Contract is accessible by everyone requesting it. It is also searchable.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityStatus">
            <summary>
            Validation Status of legal identity
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.IdentityUndefined">
            <summary>
            Identity is not defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotApproved">
            <summary>
            Identity is not approved (yet) by trust provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotValidYet">
            <summary>
            Legal identity is not valid yet. 
            <see cref="P:Waher.Networking.XMPP.Contracts.LegalIdentity.From"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotValidAnymore">
            <summary>
            Legal identity is not valid anymore.
            <see cref="P:Waher.Networking.XMPP.Contracts.LegalIdentity.To"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoClientPublicKey">
            <summary>
            No client public key found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ClientKeyNotRecognized">
            <summary>
            Client key not recognized.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoClientSignature">
            <summary>
            No client signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ClientSignatureInvalid">
            <summary>
            Client signature invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoTrustProvider">
            <summary>
            No Trust Provider attesting to the validity of the identity
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoProviderPublicKey">
            <summary>
            No provider public key found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoProviderSignature">
            <summary>
            No Trust Provider signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ProviderSignatureInvalid">
            <summary>
            Provider signature invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ProviderKeyNotRecognized">
            <summary>
            Provider key not recognized.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.Valid">
            <summary>
            Legal identity valid
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler">
            <summary>
            Delegate for identity validation callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs">
            <summary>
            Event arguments for identity validation responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.#ctor(Waher.Networking.XMPP.Contracts.IdentityStatus,System.Object)">
            <summary>
            Event arguments for validation responses
            </summary>
            <param name="Status">Validation status</param>
            <param name="State">State object</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.Status">
            <summary>
            Validation status of legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.State">
            <summary>
            State object.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdReferencesEventHandler">
            <summary>
            Delegate for ID References callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs">
            <summary>
            Event arguments for ID References responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,System.String[])">
            <summary>
            Event arguments for ID References responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="References">ID References.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs.References">
            <summary>
            ID References
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler">
            <summary>
            Delegate for legal identities callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs">
            <summary>
            Event arguments for legal identities responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity[])">
            <summary>
            Event arguments for legal identities responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Identities">Legal Identities.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs.Identities">
            <summary>
            Legal Identities
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler">
            <summary>
            Delegate for legal identity callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs">
            <summary>
            Event arguments for legal identity responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Event arguments for legal identity responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Identity">Legal Identity.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs.Identity">
            <summary>
            Legal Identity
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.KeyEventHandler">
            <summary>
            Delegate for key callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.KeyEventArgs">
            <summary>
            Event arguments for key responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.KeyEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.P2P.E2E.IE2eEndpoint)">
            <summary>
            Event arguments for key responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Key">Key.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.KeyEventArgs.Key">
            <summary>
            Public key of server endpoint.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignatureEventHandler">
            <summary>
            Delegate for signature callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignatureEventArgs">
            <summary>
            Event arguments for signature responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SignatureEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,System.Byte[],System.Byte[])">
            <summary>
            Event arguments for signature responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="S1">First signature</param>
            <param name="S2">Second signature, if available</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignatureEventArgs.S1">
            <summary>
            First signature
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignatureEventArgs.S2">
            <summary>
            Second signature, if available
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractEventHandler">
            <summary>
            Delegate for smart contract callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractEventArgs">
            <summary>
            Event arguments for smart contract responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SmartContractEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Event arguments for smart contract responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Contract">Smart Contract.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SmartContractEventArgs.Contract">
            <summary>
            Smart Contract
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractsEventHandler">
            <summary>
            Delegate for smart contracts callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs">
            <summary>
            Event arguments for smart contracts responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.Contract[])">
            <summary>
            Event arguments for smart contracts responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Contracts">Smart Contracts.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs.Contracts">
            <summary>
            Smart Contracts
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BlockElement">
            <summary>
            Abstract base class for inline elements.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BlockElement.Parse(System.Xml.XmlElement)">
            <summary>
            Parses XML for a set of block elements.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Array of block elements</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks">
            <summary>
            Abstract base class for sets of blocks.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.Body">
            <summary>
            Body elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList">
            <summary>
            Bullet list
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock">
            <summary>
            Abstract base class of blocks with inline elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock.Elements">
            <summary>
            Inline elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item">
            <summary>
            An item in an item list.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList">
            <summary>
            Abstract base class for item lists
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList">
            <summary>
            Numbered list
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph">
            <summary>
            Paragaph of text.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section">
            <summary>
            A section consisting of a header and a body.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.Header">
            <summary>
            Header elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement">
            <summary>
            Abstract base class for human readable elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement})">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
            <param name="Elements">Elements to serialize.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement},System.String)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
            <param name="Elements">Elements to serialize.</param>
            <param name="EncapsulatingElementName">Encapsulating element name.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText">
            <summary>
            Class representing human-readable text.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Parse(System.Xml.XmlElement)">
            <summary>
            Class representing human-readable text.
            </summary>
            <param name="Xml">XML representation.</param>
            <returns>Human-readable text.</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Language">
            <summary>
            Optional language
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Serialize(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Serializes the human-readable text, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="TagName">Local name of the text.</param>
            <param name="IncludeNamespace">If namespace attribute should be included.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateMarkdown(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GeneratePlainText(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates plain text for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>Plain text</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateHTML(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates HTML for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>HTML</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateXAML(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates XAML for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>XAML</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting">
            <summary>
            Abstract base class for inline formatting elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting.Elements">
            <summary>
            Embedded elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.InlineElement">
            <summary>
            Abstract base class for inline elements.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.InlineElement.Parse(System.Xml.XmlElement)">
            <summary>
            Parses XML for a set of inline elements.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Array of inline elements</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter">
            <summary>
            Is replaced by parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.Name">
            <summary>
            Name of parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough">
            <summary>
            Text that is stricken through
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript">
            <summary>
            Sub text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript">
            <summary>
            Superscript text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.Value">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline">
            <summary>
            Underline text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityState">
            <summary>
            Lists recognized legal identity states.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Created">
            <summary>
            An application has been received.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Rejected">
            <summary>
            The legal identity has been rejected.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Approved">
            <summary>
            The legal identity is authenticated and approved by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Obsoleted">
            <summary>
            The legal identity has been explicitly obsoleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Compromized">
            <summary>
            The legal identity has been reported compromized by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentity">
            <summary>
            Legal identity
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.#ctor">
            <summary>
            Legal identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Id">
            <summary>
            ID of the legal identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Provider">
            <summary>
            Provider where the identity is maintained.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.State">
            <summary>
            Current state of identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Created">
            <summary>
            When the identity object was created
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Updated">
            <summary>
            When the identity object was last updated
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.From">
            <summary>
            From what point in time the legal identity is valid.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.To">
            <summary>
            To what point in time the legal identity is valid.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Properties">
            <summary>
            Properties detailing the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientKeyName">
            <summary>
            Type of key used for client signatures
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientPubKey1">
            <summary>
            Public key 1
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientPubKey2">
            <summary>
            Public key 2
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientSignature1">
            <summary>
            Client signature 1
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientSignature2">
            <summary>
            Client signature 2
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ServerSignature1">
            <summary>
            Server signature 1
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ServerSignature2">
            <summary>
            Server signature 2
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Parse(System.Xml.XmlElement)">
            <summary>
            Parses an identity from its XML representation
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Legal identity</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.HasClientPublicKey">
            <summary>
            If the identity has a client public key
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.HasClientSignature">
            <summary>
            If the identity has a client signature
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Serialize(System.Text.StringBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serializes the identity to XML
            </summary>
            <param name="Xml">XML output</param>
            <param name="IncludeNamespace">If namespace should be included in the identity element.</param>
            <param name="IncludeIdAttribute">If the id attribute should be included</param>
            <param name="IncludeClientSignature">If the client signature should be included</param>
            <param name="IncludeStatus">If the status should be included</param>
            <param name="IncludeServerSignature">If the server signature should be included</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.ValidateSignature(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Validates a client signature
            </summary>
            <param name="Data">Binary data being signed.</param>
            <param name="s1">First signature</param>
            <param name="s2">Second signature, if available.</param>
            <returns>If the client signature is correct</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.ValidateClientSignature">
            <summary>
            Validates the client signature of the legal identity
            </summary>
            <returns>If the client signature of the legal identity is correct</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.GetTags">
            <summary>
            Gets tags describing the legal identity.
            </summary>
            <returns>Set of tags</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Item(System.String)">
            <summary>
            Access to property values.
            </summary>
            <param name="Key">Property key</param>
            <returns>Corresponding property value, if one is found with the same key, or the empty string, if not.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.NumericalParameter">
            <summary>
            Numerical contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NumericalParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NumericalParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NumericalParameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Parameter">
            <summary>
            Abstract base class for contractual parameters
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Descriptions">
            <summary>
            Discriptions of the role, in different languages.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractParts">
            <summary>
            How the parts of the contract are defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.Open">
            <summary>
            Contract is open. Anyone can sign.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.TemplateOnly">
            <summary>
            Contract is only a template. No-one can sign.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined">
            <summary>
            Only explicitly defined parts can sign.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Part">
            <summary>
            Class defining a part in a contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.LegalId">
            <summary>
            Legal identity of part
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.Role">
            <summary>
            Role of the part in the contract
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Property">
            <summary>
            Named property
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.#ctor(System.String,System.String)">
            <summary>
            Named property
            </summary>
            <param name="Name">Name of property</param>
            <param name="Value">Property value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Property.Name">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Property.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Role">
            <summary>
            Class defining a role
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.Descriptions">
            <summary>
            Discriptions of the role, in different languages.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.Name">
            <summary>
            Name of the role.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.MinCount">
            <summary>
            Smallest amount of signatures of this role required for a legally binding contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.MaxCount">
            <summary>
            Largest amount of signatures of this role required for a legally binding contract.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServerSignature">
            <summary>
            Represents a server signature on a contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServerSignature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Signature">
            <summary>
            Abstract base class of signatures
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Signature.Timestamp">
            <summary>
            Timestamp of signature.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Signature.S1">
            <summary>
            Signature 1
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Signature.S2">
            <summary>
            Signature 2 (might be required, based on cryptographic algorithm, or null if not required).
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Signature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.StringParameter">
            <summary>
            String-valued contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.StringParameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
    </members>
</doc>
